import { NextResponse } from "next/server"

// Expanded problems database with all Big 6 company problems
const problems = [
  {
    id: 1,
    title: "Two Sum",
    difficulty: "Easy",
    acceptance: "49.1%",
    category: "Array",
    tags: ["Array", "Hash Table"],
    companies: ["Google", "Amazon", "Apple"],
  },
  {
    id: 2,
    title: "Longest Substring Without Repeating Characters",
    difficulty: "Medium",
    acceptance: "33.8%",
    category: "String",
    tags: ["Hash Table", "String", "Sliding Window"],
    companies: ["Google", "Amazon", "Meta"],
  },
  {
    id: 3,
    title: "Group Anagrams",
    difficulty: "Medium",
    acceptance: "67.5%",
    category: "String",
    tags: ["Array", "Hash Table", "String", "Sorting"],
    companies: ["Google", "Amazon"],
  },
  {
    id: 4,
    title: "Valid Parentheses",
    difficulty: "Easy",
    acceptance: "40.7%",
    category: "Stack",
    tags: ["String", "Stack"],
    companies: ["Google", "Amazon", "Microsoft"],
  },
  {
    id: 5,
    title: "Merge Intervals",
    difficulty: "Medium",
    acceptance: "46.9%",
    category: "Array",
    tags: ["Array", "Sorting"],
    companies: ["Google", "Meta", "Amazon"],
  },
  {
    id: 6,
    title: "Spiral Matrix",
    difficulty: "Medium",
    acceptance: "48.9%",
    category: "Array",
    tags: ["Array", "Matrix", "Simulation"],
    companies: ["Google", "Apple"],
  },
  {
    id: 7,
    title: "Rotate Image",
    difficulty: "Medium",
    acceptance: "71.9%",
    category: "Array",
    tags: ["Array", "Math", "Matrix"],
    companies: ["Google", "Apple"],
  },
  {
    id: 8,
    title: "String to Integer (atoi)",
    difficulty: "Medium",
    acceptance: "16.6%",
    category: "String",
    tags: ["String"],
    companies: ["Google", "Amazon"],
  },
  {
    id: 9,
    title: "ZigZag Conversion",
    difficulty: "Medium",
    acceptance: "47.1%",
    category: "String",
    tags: ["String"],
    companies: ["Google"],
  },
  {
    id: 10,
    title: "Binary Tree Maximum Path Sum",
    difficulty: "Hard",
    acceptance: "39.4%",
    category: "Tree",
    tags: ["Dynamic Programming", "Tree", "Depth-First Search", "Binary Tree"],
    companies: ["Google", "Meta", "Amazon"],
  },
  {
    id: 11,
    title: "Serialize and Deserialize Binary Tree",
    difficulty: "Hard",
    acceptance: "55.7%",
    category: "Tree",
    tags: ["String", "Tree", "Depth-First Search", "Breadth-First Search", "Design", "Binary Tree"],
    companies: ["Google", "Meta", "Amazon"],
  },
  {
    id: 12,
    title: "Word Ladder",
    difficulty: "Hard",
    acceptance: "36.7%",
    category: "Graph",
    tags: ["Hash Table", "String", "Breadth-First Search"],
    companies: ["Google", "Amazon"],
  },
  {
    id: 13,
    title: "Number of Islands",
    difficulty: "Medium",
    acceptance: "57.8%",
    category: "Graph",
    tags: ["Array", "Depth-First Search", "Breadth-First Search", "Union Find", "Matrix"],
    companies: ["Google", "Amazon", "Meta"],
  },
  {
    id: 14,
    title: "Clone Graph",
    difficulty: "Medium",
    acceptance: "51.7%",
    category: "Graph",
    tags: ["Hash Table", "Depth-First Search", "Breadth-First Search", "Graph"],
    companies: ["Google", "Meta"],
  },
  {
    id: 15,
    title: "Course Schedule",
    difficulty: "Medium",
    acceptance: "46.9%",
    category: "Graph",
    tags: ["Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"],
    companies: ["Google", "Amazon"],
  },
  {
    id: 16,
    title: "Binary Tree Level Order Traversal",
    difficulty: "Medium",
    acceptance: "65.1%",
    category: "Tree",
    tags: ["Tree", "Breadth-First Search", "Binary Tree"],
    companies: ["Google", "Amazon", "Apple"],
  },
  {
    id: 17,
    title: "Validate Binary Search Tree",
    difficulty: "Medium",
    acceptance: "32.0%",
    category: "Tree",
    tags: ["Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"],
    companies: ["Google", "Amazon", "Microsoft"],
  },
  {
    id: 18,
    title: "Edit Distance",
    difficulty: "Hard",
    acceptance: "54.9%",
    category: "Dynamic Programming",
    tags: ["String", "Dynamic Programming"],
    companies: ["Google", "Amazon"],
  },
  {
    id: 19,
    title: "Regular Expression Matching",
    difficulty: "Hard",
    acceptance: "27.9%",
    category: "Dynamic Programming",
    tags: ["String", "Dynamic Programming", "Recursion"],
    companies: ["Google", "Meta"],
  },
  {
    id: 20,
    title: "Longest Increasing Subsequence",
    difficulty: "Medium",
    acceptance: "54.1%",
    category: "Dynamic Programming",
    tags: ["Array", "Binary Search", "Dynamic Programming"],
    companies: ["Google", "Microsoft"],
  },
  {
    id: 21,
    title: "Maximum Subarray",
    difficulty: "Medium",
    acceptance: "50.1%",
    category: "Dynamic Programming",
    tags: ["Array", "Divide and Conquer", "Dynamic Programming"],
    companies: ["Google", "Amazon", "Microsoft"],
  },
  {
    id: 22,
    title: "Coin Change",
    difficulty: "Medium",
    acceptance: "41.7%",
    category: "Dynamic Programming",
    tags: ["Array", "Dynamic Programming", "Breadth-First Search"],
    companies: ["Google", "Amazon"],
  },
  {
    id: 23,
    title: "Unique Paths",
    difficulty: "Medium",
    acceptance: "63.5%",
    category: "Dynamic Programming",
    tags: ["Math", "Dynamic Programming", "Combinatorics"],
    companies: ["Google", "Amazon"],
  },
  {
    id: 24,
    title: "Word Break",
    difficulty: "Medium",
    acceptance: "45.0%",
    category: "Dynamic Programming",
    tags: ["Hash Table", "String", "Dynamic Programming", "Trie", "Memoization"],
    companies: ["Google", "Amazon"],
  },
  {
    id: 25,
    title: "Palindrome Partitioning",
    difficulty: "Medium",
    acceptance: "66.8%",
    category: "Dynamic Programming",
    tags: ["String", "Dynamic Programming", "Backtracking"],
    companies: ["Google"],
  },
  {
    id: 26,
    title: "LRU Cache Implementation",
    difficulty: "Medium",
    acceptance: "40.5%",
    category: "Design",
    tags: ["Hash Table", "Linked List", "Design", "Doubly-Linked List"],
    companies: ["Apple", "Amazon", "Microsoft"],
  },
  {
    id: 27,
    title: "Design File System",
    difficulty: "Medium",
    acceptance: "65.2%",
    category: "Design",
    tags: ["Hash Table", "String", "Design", "Trie"],
    companies: ["Apple", "Google"],
  },
  {
    id: 28,
    title: "Implement Trie (Prefix Tree)",
    difficulty: "Medium",
    acceptance: "65.1%",
    category: "Trie",
    tags: ["Hash Table", "String", "Design", "Trie"],
    companies: ["Apple", "Google", "Microsoft"],
  },
  {
    id: 29,
    title: "Binary Search Variations",
    difficulty: "Medium",
    acceptance: "55.0%",
    category: "Binary Search",
    tags: ["Array", "Binary Search"],
    companies: ["Apple", "Google"],
  },
  {
    id: 30,
    title: "Sliding Window Maximum",
    difficulty: "Hard",
    acceptance: "46.3%",
    category: "Sliding Window",
    tags: ["Array", "Queue", "Sliding Window", "Heap (Priority Queue)", "Monotonic Queue"],
    companies: ["Apple", "Amazon"],
  },
  {
    id: 31,
    title: "Design Hit Counter",
    difficulty: "Medium",
    acceptance: "66.8%",
    category: "Design",
    tags: ["Hash Table", "Binary Search", "Design", "Queue"],
    companies: ["Apple", "Google"],
  },
  {
    id: 32,
    title: "Implement Stack with Min Function",
    difficulty: "Medium",
    acceptance: "52.4%",
    category: "Stack",
    tags: ["Stack", "Design"],
    companies: ["Apple", "Amazon"],
  },
  {
    id: 33,
    title: "Design Circular Queue",
    difficulty: "Medium",
    acceptance: "48.4%",
    category: "Queue",
    tags: ["Array", "Linked List", "Design", "Queue"],
    companies: ["Apple", "Google"],
  },
  {
    id: 34,
    title: "Merge k Sorted Lists",
    difficulty: "Hard",
    acceptance: "47.1%",
    category: "Linked List",
    tags: ["Linked List", "Divide and Conquer", "Heap (Priority Queue)", "Merge Sort"],
    companies: ["Microsoft", "Amazon", "Google"],
  },
  {
    id: 35,
    title: "Design LRU Cache",
    difficulty: "Medium",
    acceptance: "40.5%",
    category: "Design",
    tags: ["Hash Table", "Linked List", "Design", "Doubly-Linked List"],
    companies: ["Microsoft", "Amazon", "Apple"],
  },
  {
    id: 36,
    title: "Implement Trie Data Structure",
    difficulty: "Medium",
    acceptance: "65.1%",
    category: "Trie",
    tags: ["Hash Table", "String", "Design", "Trie"],
    companies: ["Microsoft", "Google"],
  },
  {
    id: 37,
    title: "Find Median from Data Stream",
    difficulty: "Hard",
    acceptance: "51.0%",
    category: "Heap",
    tags: ["Two Pointers", "Design", "Sorting", "Heap (Priority Queue)", "Data Stream"],
    companies: ["Microsoft", "Google"],
  },
  {
    id: 38,
    title: "Design Twitter Feed",
    difficulty: "Medium",
    acceptance: "35.6%",
    category: "Design",
    tags: ["Hash Table", "Linked List", "Design", "Heap (Priority Queue)"],
    companies: ["Microsoft", "Meta"],
  },
  {
    id: 39,
    title: "Implement Rate Limiter",
    difficulty: "Medium",
    acceptance: "45.0%",
    category: "Design",
    tags: ["Hash Table", "Design"],
    companies: ["Microsoft", "Amazon"],
  },
  {
    id: 40,
    title: "Design Search Autocomplete",
    difficulty: "Hard",
    acceptance: "47.2%",
    category: "Design",
    tags: ["Hash Table", "String", "Design", "Trie", "Data Stream"],
    companies: ["Microsoft", "Google"],
  },
  {
    id: 41,
    title: "Build Expression Evaluator",
    difficulty: "Hard",
    acceptance: "38.9%",
    category: "Stack",
    tags: ["Array", "Math", "String", "Stack", "Recursion"],
    companies: ["Microsoft", "Google"],
  },
  {
    id: 42,
    title: "Binary Tree Right Side View",
    difficulty: "Medium",
    acceptance: "61.9%",
    category: "Tree",
    tags: ["Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"],
    companies: ["Microsoft", "Amazon"],
  },
  {
    id: 43,
    title: "Word Search II",
    difficulty: "Hard",
    acceptance: "37.6%",
    category: "Backtracking",
    tags: ["Array", "String", "Backtracking", "Trie", "Matrix"],
    companies: ["Microsoft", "Google"],
  },
  {
    id: 44,
    title: "Design Add and Search Words",
    difficulty: "Medium",
    acceptance: "43.9%",
    category: "Design",
    tags: ["String", "Depth-First Search", "Design", "Trie"],
    companies: ["Microsoft", "Google"],
  },
  {
    id: 45,
    title: "Implement Queue using Stacks",
    difficulty: "Easy",
    acceptance: "63.7%",
    category: "Stack",
    tags: ["Stack", "Design", "Queue"],
    companies: ["Microsoft", "Amazon"],
  },
  {
    id: 46,
    title: "Find All Anagrams in String",
    difficulty: "Medium",
    acceptance: "49.8%",
    category: "String",
    tags: ["Hash Table", "String", "Sliding Window"],
    companies: ["Microsoft", "Amazon"],
  },
  {
    id: 47,
    title: "Design Circular Deque",
    difficulty: "Medium",
    acceptance: "58.1%",
    category: "Queue",
    tags: ["Array", "Linked List", "Design", "Queue"],
    companies: ["Microsoft", "Google"],
  },
  {
    id: 48,
    title: "Implement Min Stack",
    difficulty: "Medium",
    acceptance: "52.4%",
    category: "Stack",
    tags: ["Stack", "Design"],
    companies: ["Microsoft", "Amazon"],
  },
  {
    id: 49,
    title: "Critical Connections in a Network",
    difficulty: "Hard",
    acceptance: "55.8%",
    category: "Graph",
    tags: ["Depth-First Search", "Graph", "Biconnected Component"],
    companies: ["Amazon", "Google"],
  },
  {
    id: 50,
    title: "Reorder Data in Log Files",
    difficulty: "Medium",
    acceptance: "55.5%",
    category: "String",
    tags: ["Array", "String", "Sorting"],
    companies: ["Amazon"],
  },
  {
    id: 51,
    title: "Prison Cells After N Days",
    difficulty: "Medium",
    acceptance: "40.5%",
    category: "Array",
    tags: ["Array", "Hash Table", "Math"],
    companies: ["Amazon"],
  },
  {
    id: 52,
    title: "Copy List with Random Pointer",
    difficulty: "Medium",
    acceptance: "51.8%",
    category: "Linked List",
    tags: ["Hash Table", "Linked List"],
    companies: ["Amazon", "Microsoft"],
  },
  {
    id: 53,
    title: "Rotting Oranges",
    difficulty: "Medium",
    acceptance: "53.1%",
    category: "Graph",
    tags: ["Array", "Breadth-First Search", "Matrix"],
    companies: ["Amazon", "Google"],
  },
  {
    id: 54,
    title: "K Closest Points to Origin",
    difficulty: "Medium",
    acceptance: "65.9%",
    category: "Heap",
    tags: ["Array", "Math", "Divide and Conquer", "Geometry", "Sorting", "Heap (Priority Queue)", "Quickselect"],
    companies: ["Amazon", "Meta"],
  },
  {
    id: 55,
    title: "Top K Frequent Elements",
    difficulty: "Medium",
    acceptance: "64.5%",
    category: "Heap",
    tags: [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting",
      "Quickselect",
    ],
    companies: ["Amazon", "Meta"],
  },
  {
    id: 56,
    title: "Meeting Rooms II",
    difficulty: "Medium",
    acceptance: "50.0%",
    category: "Heap",
    tags: ["Array", "Two Pointers", "Greedy", "Sorting", "Heap (Priority Queue)", "Prefix Sum"],
    companies: ["Amazon", "Google"],
  },
  {
    id: 57,
    title: "Analyze User Website Visit Pattern",
    difficulty: "Medium",
    acceptance: "45.2%",
    category: "Hash Table",
    tags: ["Array", "Hash Table", "Sorting"],
    companies: ["Amazon"],
  },
  {
    id: 58,
    title: "Minimum Cost to Connect Sticks",
    difficulty: "Medium",
    acceptance: "68.9%",
    category: "Heap",
    tags: ["Array", "Greedy", "Heap (Priority Queue)"],
    companies: ["Amazon"],
  },
  {
    id: 59,
    title: "Valid Palindrome II",
    difficulty: "Easy",
    acceptance: "39.1%",
    category: "String",
    tags: ["Two Pointers", "String"],
    companies: ["Meta", "Amazon"],
  },
  {
    id: 60,
    title: "Binary Tree Vertical Order Traversal",
    difficulty: "Medium",
    acceptance: "51.2%",
    category: "Tree",
    tags: ["Hash Table", "Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"],
    companies: ["Meta", "Google"],
  },
  {
    id: 61,
    title: "Remove Invalid Parentheses",
    difficulty: "Hard",
    acceptance: "46.9%",
    category: "String",
    tags: ["String", "Backtracking", "Breadth-First Search"],
    companies: ["Meta", "Google"],
  },
  {
    id: 62,
    title: "Subarray Sum Equals K",
    difficulty: "Medium",
    acceptance: "43.4%",
    category: "Array",
    tags: ["Array", "Hash Table", "Prefix Sum"],
    companies: ["Meta", "Amazon"],
  },
  {
    id: 63,
    title: "Exclusive Time of Functions",
    difficulty: "Medium",
    acceptance: "60.9%",
    category: "Stack",
    tags: ["Array", "Stack"],
    companies: ["Meta"],
  },
  {
    id: 64,
    title: "Random Pick with Weight",
    difficulty: "Medium",
    acceptance: "45.8%",
    category: "Binary Search",
    tags: ["Math", "Binary Search", "Prefix Sum", "Randomized"],
    companies: ["Meta", "Google"],
  },
  {
    id: 65,
    title: "Minimum Remove to Make Valid Parentheses",
    difficulty: "Medium",
    acceptance: "65.9%",
    category: "String",
    tags: ["String", "Stack"],
    companies: ["Meta", "Amazon"],
  },
  {
    id: 66,
    title: "Accounts Merge",
    difficulty: "Medium",
    acceptance: "56.9%",
    category: "Graph",
    tags: ["Array", "Hash Table", "String", "Depth-First Search", "Breadth-First Search", "Union Find"],
    companies: ["Meta", "Google"],
  },
  {
    id: 67,
    title: "Word Ladder II",
    difficulty: "Hard",
    acceptance: "27.1%",
    category: "Graph",
    tags: ["Hash Table", "String", "Backtracking", "Breadth-First Search"],
    companies: ["Meta", "Amazon"],
  },
  {
    id: 68,
    title: "Alien Dictionary",
    difficulty: "Hard",
    acceptance: "32.9%",
    category: "Graph",
    tags: ["Array", "String", "Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"],
    companies: ["Meta", "Google"],
  },
  {
    id: 69,
    title: "Lowest Common Ancestor of Binary Tree",
    difficulty: "Medium",
    acceptance: "61.1%",
    category: "Tree",
    tags: ["Tree", "Depth-First Search", "Binary Tree"],
    companies: ["Meta", "Amazon", "Google"],
  },
  {
    id: 70,
    title: "Construct Binary Tree from Preorder and Inorder",
    difficulty: "Medium",
    acceptance: "61.5%",
    category: "Tree",
    tags: ["Array", "Hash Table", "Divide and Conquer", "Tree", "Binary Tree"],
    companies: ["Meta", "Google"],
  },
]

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url)
  const difficulty = searchParams.get("difficulty")
  const category = searchParams.get("category")
  const status = searchParams.get("status")
  const company = searchParams.get("company")

  let filteredProblems = problems

  if (difficulty) {
    filteredProblems = filteredProblems.filter(
      (problem) => problem.difficulty.toLowerCase() === difficulty.toLowerCase(),
    )
  }

  if (category) {
    filteredProblems = filteredProblems.filter((problem) => problem.category.toLowerCase() === category.toLowerCase())
  }

  if (company) {
    filteredProblems = filteredProblems.filter((problem) =>
      problem.companies.some((c) => c.toLowerCase() === company.toLowerCase()),
    )
  }

  // Mock status filtering (in real app, this would check user's solved problems)
  if (status) {
    if (status === "solved") {
      filteredProblems = filteredProblems.filter((problem) => problem.id <= 5) // Mock: first 5 are "solved"
    } else if (status === "unsolved") {
      filteredProblems = filteredProblems.filter((problem) => problem.id > 5)
    }
  }

  return NextResponse.json({
    problems: filteredProblems,
    total: filteredProblems.length,
  })
}
